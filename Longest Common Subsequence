class Solution {
public:
int solveUsingRec(string t1,string t2,int i,int j){
    if(i==t1.length()) return 0;
    if(j==t2.length()) return 0;
    int ans=0;
    if(t1[i]==t2[j]){
        ans=1+solveUsingRec(t1,t2,i+1,j+1);
    }else{
        ans=0+max(solveUsingRec(t1,t2,i+1,j),solveUsingRec(t1,t2,i,j+1));
    }
    return ans;
}

int solveUsingMem(string &t1,string &t2,int i,int j,vector<vector<int>>&dp){
    if(i==t1.length()) return 0;
    if(j==t2.length()) return 0;
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    int ans=0;
    if(t1[i]==t2[j]){
        ans=1+solveUsingMem(t1,t2,i+1,j+1,dp);
    }else{
        ans=0+max(solveUsingMem(t1,t2,i+1,j,dp),solveUsingMem(t1,t2,i,j+1,dp));
    }
    dp[i][j]=ans;
    return dp[i][j];
}
int solveUsingTab(string t1,string t2){
   int n = t1.length();
    int m = t2.length();

    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
    for (int i = n - 1; i >= 0; i--) {
        for (int j = m - 1; j >= 0; j--) {
            if (t1[i] == t2[j]) {
                dp[i][j] = 1 + dp[i + 1][j + 1];
            } else {
                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]);
            }
        }
    }

    return dp[0][0];
}

  int solveUsingSpaceOpt(string &t1, string &t2) {
        int n = t1.length();
        int m = t2.length();

        vector<int> next(m + 1, 0);  
        vector<int> current(m + 1, 0);  

        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {
                if (t1[i] == t2[j]) {
                    current[j] = 1 + next[j + 1];
                } else {
                    current[j] = max(next[j], current[j + 1]);
                }
            }
            next = current;  
        }

        return next[0];
    }


int longestCommonSubsequence(string text1, string text2) {
        int i=0;
        int j=0;
        
        int ans=solveUsingSpaceOpt(text1,text2);
        return ans;
    }
};
