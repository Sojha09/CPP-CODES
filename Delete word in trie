#include <bits/stdc++.h>
using namespace std;

struct TrieNode {
    TrieNode* children[26];
    bool isEndOfWord;

    TrieNode() {
        isEndOfWord = false;
        for (int i = 0; i < 26; i++)
            children[i] = nullptr;
    }
};

class Trie {
public:
    TrieNode* root;
    Trie() { root = new TrieNode(); }

    void insert(string word) {
        TrieNode* node = root;
        for (char c : word) {
            int index = c - 'a';
            if (!node->children[index])
                node->children[index] = new TrieNode();
            node = node->children[index];
        }
        node->isEndOfWord = true;
    }

    bool search(string word) {
        TrieNode* node = root;
        for (char c : word) {
            int index = c - 'a';
            if (!node->children[index])
                return false;
            node = node->children[index];
        }
        return node->isEndOfWord;
    }

    bool deleteWord(TrieNode* node, string word, int depth = 0) {
        if (!node) return false;

        if (depth == word.size()) {
            if (!node->isEndOfWord) return false;
            node->isEndOfWord = false;

            for (int i = 0; i < 26; i++)
                if (node->children[i]) return false;
            return true;
        }

        int index = word[depth] - 'a';
        if (deleteWord(node->children[index], word, depth + 1)) {
            delete node->children[index];
            node->children[index] = nullptr;

            return !node->isEndOfWord && all_of(begin(node->children), end(node->children),
                                                [](auto c){ return c == nullptr; });
        }
        return false;
    }
};

int main() {
    Trie t;
    t.insert("apple");
    t.insert("app");

    cout << (t.search("apple") ? "Found\n" : "Not Found\n");
    t.deleteWord(t.root, "apple");
    cout << (t.search("apple") ? "Found\n" : "Not Found\n");
    cout << (t.search("app") ? "Found\n" : "Not Found\n");

    return 0;
}
