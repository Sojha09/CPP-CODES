#include <bits/stdc++.h>
using namespace std;

int primsMST(int V, vector<vector<pair<int, int>>> &adj) {
    // Min-heap (weight, node)
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    vector<bool> inMST(V, false); // Track included vertices
    int totalWeight = 0;

    // Start from node 0
    pq.push({0, 0}); // (weight, vertex)

    while (!pq.empty()) {
        auto [weight, u] = pq.top();
        pq.pop();

        // Skip if already included in MST
        if (inMST[u])
            continue;

        // Include this vertex in MST
        inMST[u] = true;
        totalWeight += weight;

        // Push all adjacent edges to the priority queue
        for (auto &[v, w] : adj[u]) {
            if (!inMST[v])
                pq.push({w, v});
        }
    }

    return totalWeight;
}

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;

    vector<vector<pair<int, int>>> adj(V); // adjacency list

    cout << "Enter edges (u v weight):" << endl;
    for (int i = 0; i < E; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w}); // undirected graph
    }

    int mstWeight = primsMST(V, adj);
    cout << "Total weight of Minimum Spanning Tree: " << mstWeight << endl;

    return 0;
}
