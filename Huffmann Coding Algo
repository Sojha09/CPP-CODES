#include <bits/stdc++.h>
using namespace std;

// Node structure for Huffman tree
struct Node {
    char ch;
    int freq;
    Node *left, *right;

    Node(char character, int frequency) {
        ch = character;
        freq = frequency;
        left = right = nullptr;
    }
};

// Comparison object for priority queue
struct Compare {
    bool operator()(Node* l, Node* r) {
        return l->freq > r->freq; // min-heap based on frequency
    }
};

// Recursive function to print Huffman Codes
void printCodes(Node* root, string str) {
    if (!root)
        return;

    // Leaf node
    if (!root->left && !root->right) {
        cout << root->ch << ": " << str << "\n";
        return;
    }

    printCodes(root->left, str + "0");
    printCodes(root->right, str + "1");
}

// Build Huffman Tree and print codes
void huffmanCoding(vector<char>& chars, vector<int>& freq) {
    priority_queue<Node*, vector<Node*>, Compare> pq;

    // Step 1: Create a leaf node for each character
    for (int i = 0; i < chars.size(); i++)
        pq.push(new Node(chars[i], freq[i]));

    // Step 2: Build Huffman Tree
    while (pq.size() > 1) {
        Node* left = pq.top(); pq.pop();
        Node* right = pq.top(); pq.pop();

        Node* newNode = new Node('$', left->freq + right->freq);
        newNode->left = left;
        newNode->right = right;

        pq.push(newNode);
    }

    // Step 3: Print Huffman Codes
    Node* root = pq.top();
    cout << "Huffman Codes:\n";
    printCodes(root, "");
}

int main() {
    vector<char> chars = {'a', 'b', 'c', 'd', 'e', 'f'};
    vector<int> freq = {5, 9, 12, 13, 16, 45};

    huffmanCoding(chars, freq);
    return 0;
}
