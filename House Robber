#include <bits/stdc++.h>
using namespace std;


int robRecursive(int i, vector<int>& nums) {
    if (i < 0) return 0;
    if (i == 0) return nums[0];

    int pick = nums[i] + robRecursive(i - 2, nums);
    int notPick = robRecursive(i - 1, nums);
    return max(pick, notPick);
}

int robMemo(int i, vector<int>& nums, vector<int>& dp) {
    if (i < 0) return 0;
    if (i == 0) return nums[0];

    if (dp[i] != -1) return dp[i];

    int pick = nums[i] + robMemo(i - 2, nums, dp);
    int notPick = robMemo(i - 1, nums, dp);

    return dp[i] = max(pick, notPick);
}


int robTabulation(vector<int>& nums) {
    int n = nums.size();
    if (n == 0) return 0;
    if (n == 1) return nums[0];

    vector<int> dp(n);
    dp[0] = nums[0];
    dp[1] = max(nums[0], nums[1]);

    for (int i = 2; i < n; i++) {
        dp[i] = max(nums[i] + dp[i - 2], dp[i - 1]);
    }

    return dp[n - 1];
}

int robOptimized(vector<int>& nums) {
    int n = nums.size();
    if (n == 0) return 0;
    if (n == 1) return nums[0];

    int prev2 = nums[0];
    int prev1 = max(nums[0], nums[1]);

    for (int i = 2; i < n; i++) {
        int curr = max(nums[i] + prev2, prev1);
        prev2 = prev1;
        prev1 = curr;
    }

    return prev1;
}
int main() {
    vector<int> nums = {2, 7, 9, 3, 1};

    cout << "Recursive: " << robRecursive(nums.size() - 1, nums) << endl;

    vector<int> dp(nums.size(), -1);
    cout << "Memoization: " << robMemo(nums.size() - 1, nums, dp) << endl;

    cout << "Tabulation: " << robTabulation(nums) << endl;

    cout << "Space Optimized: " << robOptimized(nums) << endl;

    return 0;
}
