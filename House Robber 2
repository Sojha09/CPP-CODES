#include <bits/stdc++.h>
using namespace std;

// Helper function for normal (linear) house robber
int robLinear(vector<int>& nums) {
    int n = nums.size();
    if (n == 0) return 0;
    if (n == 1) return nums[0];

    int prev2 = nums[0];
    int prev1 = max(nums[0], nums[1]);

    for (int i = 2; i < n; i++) {
        int curr = max(nums[i] + prev2, prev1);
        prev2 = prev1;
        prev1 = curr;
    }

    return prev1;
}

// Main function for circular houses
int robCircular(vector<int>& nums) {
    int n = nums.size();
    if (n == 1) return nums[0]; // Only one house
    if (n == 2) return max(nums[0], nums[1]);

    // Case 1: Exclude first house
    vector<int> case1(nums.begin() + 1, nums.end());

    // Case 2: Exclude last house
    vector<int> case2(nums.begin(), nums.end() - 1);

    return max(robLinear(case1), robLinear(case2));
}

int main() {
    vector<int> nums = {2, 3, 2};
    cout << "Max money robbed (circular): " << robCircular(nums) << endl;

    vector<int> nums2 = {1, 2, 3, 1};
    cout << "Max money robbed (circular): " << robCircular(nums2) << endl;

    return 0;
}
