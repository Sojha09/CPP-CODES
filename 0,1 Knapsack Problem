class Solution {
  public:
  int KnapTab(int weight[], int value[],int n,int capacity){
    vector<vector<int>> dp(n,vector<int>(capacity+1,0));
    for (int wt = weight[0]; wt <= capacity;wt++){
        if(weight[0]<=capacity){
            dp[0][wt]=value[0];
        }else{
            dp[0][wt]=0;
        }
    
    }
    for (int index = 1; index < n;index++){
        for (int wt = 0; wt <= capacity;wt++){
            int include = 0;
    if(weight[index]<=wt)
       include = value[index]+dp[index - 1]  [wt- weight[index]];

    int exclude = 0 + dp[index - 1][wt];

    dp[index][wt]= max(include, exclude);
        }
    }
    return dp[n-1][capacity];
}

    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        // code here
       int n=val.size();
       int value[n],weight[n];
        for (int i = 0; i < n; i++) {
        value[i] = val[i];
        weight[i] = wt[i];
    }
    return KnapTab(weight,value,n,W);
    }
};
