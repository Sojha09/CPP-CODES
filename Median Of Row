class Solution {
  public:
    int countSmallerEqual(vector<int>& row, int mid) {
        return upper_bound(row.begin(), row.end(), mid) - row.begin();
    }

    int median(vector<vector<int>> &mat) {
        int r = mat.size();
        int c = mat[0].size();

        int low = INT_MAX, high = INT_MIN;
        for (int i = 0; i < r; i++) {
            low = min(low, mat[i][0]);
            high = max(high, mat[i][c - 1]);
        }

        int desired = (r * c + 1) / 2;

        while (low < high) {
            int mid = low + (high - low) / 2;
            int cnt = 0;

            for (int i = 0; i < r; i++) {
                cnt += countSmallerEqual(mat[i], mid);
            }

            if (cnt < desired)
                low = mid + 1;
            else
                high = mid;
        }

        return low;
    }
};
