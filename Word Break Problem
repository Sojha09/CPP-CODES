#include <bits/stdc++.h>
using namespace std;

struct TrieNode {
    TrieNode* children[26];
    bool isEndOfWord;
    TrieNode() {
        isEndOfWord = false;
        for (int i = 0; i < 26; i++)
            children[i] = nullptr;
    }
};

class Trie {
public:
    TrieNode* root;
    Trie() { root = new TrieNode(); }

    void insert(string word) {
        TrieNode* node = root;
        for (char c : word) {
            int index = c - 'a';
            if (!node->children[index])
                node->children[index] = new TrieNode();
            node = node->children[index];
        }
        node->isEndOfWord = true;
    }

    bool wordBreakUtil(string s, int start) {
        if (start == s.size()) return true;
        TrieNode* node = root;

        for (int i = start; i < s.size(); i++) {
            int index = s[i] - 'a';
            if (!node->children[index]) return false;
            node = node->children[index];

            if (node->isEndOfWord && wordBreakUtil(s, i + 1))
                return true;
        }
        return false;
    }

    bool wordBreak(string s) {
        return wordBreakUtil(s, 0);
    }
};

int main() {
    Trie t;
    t.insert("leet");
    t.insert("code");

    string s = "leetcode";
    cout << (t.wordBreak(s) ? "True" : "False") << endl;
    return 0;
}
