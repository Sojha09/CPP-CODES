#include <bits/stdc++.h>
using namespace std;


// Simple Recursive Approach

int fibRecursive(int n) {
    if (n <= 1) return n;
    return fibRecursive(n - 1) + fibRecursive(n - 2);
}

// DP Top-Down (Memoization)

int fibMemo(int n, vector<int>& dp) {
    if (n <= 1) return n;

    if (dp[n] != -1) return dp[n];  // already computed

    return dp[n] = fibMemo(n - 1, dp) + fibMemo(n - 2, dp);
}


// DP Bottom-Up (Tabulation)

int fibTabulation(int n) {
    if (n <= 1) return n;

    vector<int> dp(n + 1);
    dp[0] = 0;
    dp[1] = 1;

    for (int i = 2; i <= n; i++)
        dp[i] = dp[i - 1] + dp[i - 2];

    return dp[n];
}

// Space Optimized DP

int fibOptimized(int n) {
    if (n <= 1) return n;

    int prev2 = 0, prev1 = 1, curr;
    for (int i = 2; i <= n; i++) {
        curr = prev1 + prev2;
        prev2 = prev1;
        prev1 = curr;
    }
    return curr;
}
int main() {
    int n;
    cout << "Enter n: ";
    cin >> n;

    cout << "\n Recursive: " << fibRecursive(n) << endl;

    vector<int> dp(n + 1, -1);
    cout << " DP (Memoization): " << fibMemo(n, dp) << endl;

    cout << "DP (Tabulation): " << fibTabulation(n) << endl;

    cout << " DP (Space Optimized): " << fibOptimized(n) << endl;

    return 0;
}
