class Solution {
public:
    vector<int> topView(Node *root) {
        vector<int> ans;
        if (root == nullptr) return ans;

        // map<HD, node->data>
        map<int, int> topNode;
        // queue of pair (node, HD)
        queue<pair<Node*, int>> q;

        q.push({root, 0});

        while (!q.empty()) {
            auto p = q.front();
            q.pop();

            Node* frontNode = p.first;
            int hd = p.second;

            // store first node at each horizontal distance
            if (topNode.find(hd) == topNode.end()) {
                topNode[hd] = frontNode->data;
            }

            // traverse left and right with updated HD
            if (frontNode->left)
                q.push({frontNode->left, hd - 1});

            if (frontNode->right)
                q.push({frontNode->right, hd + 1});
        }

        // extract values in order of HD
        for (auto it : topNode) {
            ans.push_back(it.second);
        }

        return ans;
    }
};
